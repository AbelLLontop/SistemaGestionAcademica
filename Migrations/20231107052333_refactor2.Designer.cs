// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionAcademica.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231107052333_refactor2")]
    partial class refactor2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Asignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HorasPracticas")
                        .HasColumnType("int");

                    b.Property<int>("HorasTeoricas")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoAsignatura")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("AsignaturaCarrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("CarreraId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("CarreraId");

                    b.ToTable("AsignaturasCarrera");
                });

            modelBuilder.Entity("AsignaturaDocente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AsignaturasDocente");
                });

            modelBuilder.Entity("Carrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Carreras");
                });

            modelBuilder.Entity("DetalleEvaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("int");

                    b.Property<float>("EvaluacionUnidad")
                        .HasColumnType("float");

                    b.Property<float>("EvidenciaAprendizaje")
                        .HasColumnType("float");

                    b.Property<float>("ExamenSustitutorio")
                        .HasColumnType("float");

                    b.Property<float>("Producto")
                        .HasColumnType("float");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("DetallesEvaluacion");
                });

            modelBuilder.Entity("Evaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<float>("PromedioFinal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("MatriculaId")
                        .IsUnique();

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarreraId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarreraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaCarreraId")
                        .HasColumnType("int");

                    b.Property<string>("Curricula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaCarreraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("PreRequisitoAsignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("PreRequisitoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.ToTable("PreRequisitosAsignatura");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradoEstudio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AsignaturaCarrera", b =>
                {
                    b.HasOne("Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carrera", "Carrera")
                        .WithMany("AsignaturasCarrera")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("AsignaturaDocente", b =>
                {
                    b.HasOne("Asignatura", "Asignatura")
                        .WithMany("AsignaturasDocente")
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany("AsignaturasDocente")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DetalleEvaluacion", b =>
                {
                    b.HasOne("Evaluacion", "Evaluacion")
                        .WithMany("DetallesEvaluacion")
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluacion");
                });

            modelBuilder.Entity("Evaluacion", b =>
                {
                    b.HasOne("Asignatura", "Asignatura")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matricula", "Matricula")
                        .WithOne("Evaluacion")
                        .HasForeignKey("Evaluacion", "MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Inscripcion", b =>
                {
                    b.HasOne("Carrera", "Carrera")
                        .WithMany("Inscripciones")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany("Inscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Matricula", b =>
                {
                    b.HasOne("AsignaturaCarrera", "AsignaturaCarrera")
                        .WithMany("Matriculas")
                        .HasForeignKey("AsignaturaCarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "usuario")
                        .WithMany("Matriculas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsignaturaCarrera");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("PreRequisitoAsignatura", b =>
                {
                    b.HasOne("Asignatura", "Asignatura")
                        .WithMany("PreRequisitosAsignatura")
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");
                });

            modelBuilder.Entity("Asignatura", b =>
                {
                    b.Navigation("AsignaturasDocente");

                    b.Navigation("Evaluaciones");

                    b.Navigation("PreRequisitosAsignatura");
                });

            modelBuilder.Entity("AsignaturaCarrera", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("Carrera", b =>
                {
                    b.Navigation("AsignaturasCarrera");

                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("Evaluacion", b =>
                {
                    b.Navigation("DetallesEvaluacion");
                });

            modelBuilder.Entity("Matricula", b =>
                {
                    b.Navigation("Evaluacion")
                        .IsRequired();
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Navigation("AsignaturasDocente");

                    b.Navigation("Inscripciones");

                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
